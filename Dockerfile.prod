# Multi-stage build with UV optimizations
FROM --platform=$TARGETPLATFORM python:3.11-alpine as builder

ARG TARGETPLATFORM
ARG BUILDPLATFORM

WORKDIR /app

# Install UV and build dependencies
RUN pip install uv && \
    apk add --no-cache --virtual .build-deps gcc musl-dev

# Copy dependency files
COPY pyproject.toml uv.lock ./

# Install dependencies with UV (production only)
RUN uv sync --frozen --no-dev --no-install-project

# Remove build dependencies
RUN apk del .build-deps

FROM --platform=$TARGETPLATFORM python:3.11-alpine as runtime

WORKDIR /app

# Install runtime dependencies
RUN apk add --no-cache curl

# Copy virtual environment from builder
COPY --from=builder /app/.venv /app/.venv

# Make sure to use the virtual environment
ENV PATH="/app/.venv/bin:$PATH"

# Copy application files
COPY api_server.py .
COPY frontend.html .
COPY frontend.js .
COPY wxcss.py .

# Copy all CSS themes including new Chinese news themes
COPY themes/*.css ./themes/

# Copy documentation
COPY *.md ./

# Add health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:5002/health || exit 1

# Set production environment variables
ENV FLASK_ENV=production
ENV PYTHONOPTIMIZE=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

# Expose port
EXPOSE 5002

# Run with Gunicorn (install it first via UV)
RUN /app/.venv/bin/pip install gunicorn
CMD ["gunicorn", "--bind", "0.0.0.0:5002", "--workers", "4", "--pythonpath", ".", "api_server:app"]